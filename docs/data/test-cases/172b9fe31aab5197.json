{"uid":"172b9fe31aab5197","name":"Test Case 9 : Biomagnetism therapy session Page and It's Content","fullName":"Tests.Biomagnetism_Service.Biomagnetism.test_Biomagnetism.TestBiomagnetism#test_biomagnetism_therapy_session_contains_related_content","historyId":"c9ffcd294524c1cc1a8401086245b89f","time":{"start":1689855706010,"stop":1689855716654,"duration":10644},"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session \n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    ","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_Biomagnetism.TestBiomagnetism object at 0x7f006ddfc220>\n\n    @allure.title(\"Test Case 9 : Biomagnetism therapy session Page and It's Content\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    \"\"\")\n    def test_biomagnetism_therapy_session_contains_related_content(self):\n    \n        try:\n>           assert self.biomagnetismObj.is_biomagnetism_therapy_session_contains_related_content()\n\nTests/Biomagnetism_Service/Biomagnetism/test_Biomagnetism.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/Biomagnetism_Service/Biomagnetism/Biomagnetism.py:299: in is_biomagnetism_therapy_session_contains_related_content\n    self.do_click(BiomagnetismElements.biomagnetism_therapy_session)\nPages/BasePage.py:61: in do_click\n    element = self.wait.until(EC.visibility_of_element_located(by_locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59dbc258c9454148762b271ed6912d2c\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f0048840430>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/support/wait.py:95: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Biomagnetism.TestBiomagnetism object at 0x7f006ddfc220>\n\n    @allure.title(\"Test Case 9 : Biomagnetism therapy session Page and It's Content\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    \"\"\")\n    def test_biomagnetism_therapy_session_contains_related_content(self):\n    \n        try:\n            assert self.biomagnetismObj.is_biomagnetism_therapy_session_contains_related_content()\n        except:\n            allure.attach(self.biomagnetismObj.driver.get_screenshot_as_png(),name=\"Biomagnetism therapy session Page and It's Content Error\", attachment_type= allure.attachment_type.PNG)\n            with allure.step(\"Biomagnetism therapy session Page and It's Content Is Failed\"):\n>               assert False\nE               assert False\n\nTests/Biomagnetism_Service/Biomagnetism/test_Biomagnetism.py:184: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1689855580776,"stop":1689855582301,"duration":1525},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session \n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    ","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_Biomagnetism.TestBiomagnetism object at 0x7f006ddfc220>\n\n    @allure.title(\"Test Case 9 : Biomagnetism therapy session Page and It's Content\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    \"\"\")\n    def test_biomagnetism_therapy_session_contains_related_content(self):\n    \n        try:\n>           assert self.biomagnetismObj.is_biomagnetism_therapy_session_contains_related_content()\n\nTests/Biomagnetism_Service/Biomagnetism/test_Biomagnetism.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/Biomagnetism_Service/Biomagnetism/Biomagnetism.py:299: in is_biomagnetism_therapy_session_contains_related_content\n    self.do_click(BiomagnetismElements.biomagnetism_therapy_session)\nPages/BasePage.py:61: in do_click\n    element = self.wait.until(EC.visibility_of_element_located(by_locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59dbc258c9454148762b271ed6912d2c\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f0048840430>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/support/wait.py:95: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Biomagnetism.TestBiomagnetism object at 0x7f006ddfc220>\n\n    @allure.title(\"Test Case 9 : Biomagnetism therapy session Page and It's Content\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>validate, contents are added all about the biomagnetism therapy session\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>In biomagnetism therapy sessions contents are related to biomagnetism therapy should be displayed\n    \n    \"\"\")\n    def test_biomagnetism_therapy_session_contains_related_content(self):\n    \n        try:\n            assert self.biomagnetismObj.is_biomagnetism_therapy_session_contains_related_content()\n        except:\n            allure.attach(self.biomagnetismObj.driver.get_screenshot_as_png(),name=\"Biomagnetism therapy session Page and It's Content Error\", attachment_type= allure.attachment_type.PNG)\n            with allure.step(\"Biomagnetism therapy session Page and It's Content Is Failed\"):\n>               assert False\nE               assert False\n\nTests/Biomagnetism_Service/Biomagnetism/test_Biomagnetism.py:184: AssertionError","steps":[{"name":"Clicked On What is biomagnetism buttom","time":{"start":1689855706010,"stop":1689855706283,"duration":273},"status":"passed","steps":[{"name":"Move Cursor To The Element","time":{"start":1689855706010,"stop":1689855706283,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"by_locator","value":"('xpath', \"(//span[@class='menu-text'][normalize-space()='What is Biomagnetism'])[1]\")"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Clicked On Biomagnetism Therapy Session","time":{"start":1689855706283,"stop":1689855716313,"duration":10030},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Biomagnetism_Service/Biomagnetism/Biomagnetism.py\", line 299, in is_biomagnetism_therapy_session_contains_related_content\n    self.do_click(BiomagnetismElements.biomagnetism_therapy_session)\n  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 61, in do_click\n    element = self.wait.until(EC.visibility_of_element_located(by_locator))\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[{"name":"Clicked On Element","time":{"start":1689855706283,"stop":1689855716312,"duration":10029},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 61, in do_click\n    element = self.wait.until(EC.visibility_of_element_located(by_locator))\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"by_locator","value":"('xpath', \"(//span[@class='menu-text'][normalize-space()='Biomagnetism Therapy session'])[1]\")"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Biomagnetism therapy session Page and It's Content Is Failed","time":{"start":1689855716654,"stop":1689855716654,"duration":0},"status":"failed","statusMessage":"AssertionError: assert False\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Tests/Biomagnetism_Service/Biomagnetism/test_Biomagnetism.py\", line 184, in test_biomagnetism_therapy_session_contains_related_content\n    assert False\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"500ed3d4cd6e29b5","name":"Biomagnetism therapy session Page and It's Content Error","source":"500ed3d4cd6e29b5.png","type":"image/png","size":1072573}],"parameters":[],"stepsCount":5,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"init_driver::0","time":{"start":1689855721102,"stop":1689855721158,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver')"},{"name":"parentSuite","value":"Tests.Biomagnetism_Service.Biomagnetism"},{"name":"suite","value":"test_Biomagnetism"},{"name":"subSuite","value":"TestBiomagnetism"},{"name":"host","value":"isadmin"},{"name":"thread","value":"86160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Biomagnetism_Service.Biomagnetism.test_Biomagnetism"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('init_driver')"]},"source":"172b9fe31aab5197.json","parameterValues":[]}