{"uid":"1588aea14308733","name":"Test Case 18 : All Review Videos Playing Or Not","fullName":"Store_Reviews.Reviews.test_review.TestReview#test_all_review_videos_playing_or_not","historyId":"1303ba920f5f8dd72915352d6d377e8e","time":{"start":1689162613335,"stop":1689162630212,"duration":16877},"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    ","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_review.TestReview object at 0x7ff08ed1db40>\n\n    @allure.title(\"Test Case 18 : All Review Videos Playing Or Not\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    \"\"\")\n    def test_all_review_videos_playing_or_not(self):\n    \n        try:\n>           assert self.reviewObj.get_all_videos_status()\n\nTests/Store_Reviews/Reviews/test_review.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/Store_Reviews/Reviews/Review.py:146: in get_all_videos_status\n    if not self.check_is_video_playing(video_index,video_element):\nPages/Store_Reviews/Reviews/Review.py:134: in check_is_video_playing\n    video_status = self.get_details_from_youtube_embed_video(element,video_iframe)\nPages/Store_Reviews/Reviews/Review.py:100: in get_details_from_youtube_embed_video\n    self.do_click_to_element_by_offset(element,50,50)\nPages/BasePage.py:36: in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py:78: in perform\n    self.w3c_actions.perform()\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py:91: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff08ed1e8f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...\\\\n#14 0x5604afdffc97 \\\\u003Cunknown>\\\\n#15 0x5604afe10113 \\\\u003Cunknown>\\\\n#16 0x7f4629094b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x5604afe18133 <unknown>\nE       #1 0x5604afb4c7f0 <unknown>\nE       #2 0x5604afbca30b <unknown>\nE       #3 0x5604afba8bd2 <unknown>\nE       #4 0x5604afbc11c7 <unknown>\nE       #5 0x5604afba89a3 <unknown>\nE       #6 0x5604afb7d46a <unknown>\nE       #7 0x5604afb7e55e <unknown>\nE       #8 0x5604afdd7cae <unknown>\nE       #9 0x5604afddb8fe <unknown>\nE       #10 0x5604afde4f20 <unknown>\nE       #11 0x5604afddc923 <unknown>\nE       #12 0x5604afdafc0e <unknown>\nE       #13 0x5604afdffb08 <unknown>\nE       #14 0x5604afdffc97 <unknown>\nE       #15 0x5604afe10113 <unknown>\nE       #16 0x7f4629094b43 <unknown>\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py:249: MoveTargetOutOfBoundsException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_review.TestReview object at 0x7ff08ed1db40>\n\n    @allure.title(\"Test Case 18 : All Review Videos Playing Or Not\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    \"\"\")\n    def test_all_review_videos_playing_or_not(self):\n    \n        try:\n            assert self.reviewObj.get_all_videos_status()\n        except:\n            allure.attach(TestReview.reviewObj.driver.get_screenshot_as_png(),name=\"All Review Videos Playing Or Not Error\", attachment_type= allure.attachment_type.PNG)\n            with allure.step(\"All Review Videos Playing Or Not Is Failed\"):\n>               assert False\nE               assert False\n\nTests/Store_Reviews/Reviews/test_review.py:104: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1689162573758,"stop":1689162575140,"duration":1382},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    ","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_review.TestReview object at 0x7ff08ed1db40>\n\n    @allure.title(\"Test Case 18 : All Review Videos Playing Or Not\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    \"\"\")\n    def test_all_review_videos_playing_or_not(self):\n    \n        try:\n>           assert self.reviewObj.get_all_videos_status()\n\nTests/Store_Reviews/Reviews/test_review.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/Store_Reviews/Reviews/Review.py:146: in get_all_videos_status\n    if not self.check_is_video_playing(video_index,video_element):\nPages/Store_Reviews/Reviews/Review.py:134: in check_is_video_playing\n    video_status = self.get_details_from_youtube_embed_video(element,video_iframe)\nPages/Store_Reviews/Reviews/Review.py:100: in get_details_from_youtube_embed_video\n    self.do_click_to_element_by_offset(element,50,50)\nPages/BasePage.py:36: in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py:78: in perform\n    self.w3c_actions.perform()\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py:91: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff08ed1e8f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"move target out of bounds\",\"message\":\"move target out of bounds\\\\n  (Sess...\\\\n#14 0x5604afdffc97 \\\\u003Cunknown>\\\\n#15 0x5604afe10113 \\\\u003Cunknown>\\\\n#16 0x7f4629094b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\nE         (Session info: chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x5604afe18133 <unknown>\nE       #1 0x5604afb4c7f0 <unknown>\nE       #2 0x5604afbca30b <unknown>\nE       #3 0x5604afba8bd2 <unknown>\nE       #4 0x5604afbc11c7 <unknown>\nE       #5 0x5604afba89a3 <unknown>\nE       #6 0x5604afb7d46a <unknown>\nE       #7 0x5604afb7e55e <unknown>\nE       #8 0x5604afdd7cae <unknown>\nE       #9 0x5604afddb8fe <unknown>\nE       #10 0x5604afde4f20 <unknown>\nE       #11 0x5604afddc923 <unknown>\nE       #12 0x5604afdafc0e <unknown>\nE       #13 0x5604afdffb08 <unknown>\nE       #14 0x5604afdffc97 <unknown>\nE       #15 0x5604afe10113 <unknown>\nE       #16 0x7f4629094b43 <unknown>\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py:249: MoveTargetOutOfBoundsException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_review.TestReview object at 0x7ff08ed1db40>\n\n    @allure.title(\"Test Case 18 : All Review Videos Playing Or Not\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate that all the clinte review videos are present and it is playing in the clinte review page?\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>All the clinte reviews videos should be present and if we click on that it should play in the clinte reviews page.\n    \n    \"\"\")\n    def test_all_review_videos_playing_or_not(self):\n    \n        try:\n            assert self.reviewObj.get_all_videos_status()\n        except:\n            allure.attach(TestReview.reviewObj.driver.get_screenshot_as_png(),name=\"All Review Videos Playing Or Not Error\", attachment_type= allure.attachment_type.PNG)\n            with allure.step(\"All Review Videos Playing Or Not Is Failed\"):\n>               assert False\nE               assert False\n\nTests/Store_Reviews/Reviews/test_review.py:104: AssertionError","steps":[{"name":"Getting All Videos Elements","time":{"start":1689162613335,"stop":1689162627788,"duration":14453},"status":"passed","steps":[{"name":"Taking All Elements","time":{"start":1689162613335,"stop":1689162627788,"duration":14453},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"by_locator","value":"('xpath', '(//div[@data-all-filters=\\'[\"filter-lyme-disease\",\"filter-thyroid-cancer\",\"filter-back-pain\",\"filter-pandas-syndrome\",\"filter-autism-spectrum-disorder\",\"filter-depression\",\"filter-extreme-allergies\",\"filter-severe-insomnia\",\"filter-flu\",\"filter-sport-injuries\",\"filter-traumatic-brain-injuries\",\"filter-bronquitis\",\"filter-shattered-spine\",\"filter-foot-pain\",\"filter-yeast-infection\",\"filter-spine-injury\",\"filter-rhabdomyolysis\",\"filter-terrible-back-pain\",\"filter-ehlers-danlos-symdrome\",\"filter-menieres-disease\",\"filter-t--cell-lymphoma\",\"filter-shoulder-pain\",\"filter-brachial-plexus-injury\",\"filter-significant-changes\",\"filter-chronic-illness\",\"filter-leg-pain\",\"filter-difficulty-in-walking\"]\\'])[1]/div/div[1]')"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Checking Each Video Is Play Or Not","time":{"start":1689162627788,"stop":1689162629833,"duration":2045},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x5604afe18133 <unknown>\n#1 0x5604afb4c7f0 <unknown>\n#2 0x5604afbca30b <unknown>\n#3 0x5604afba8bd2 <unknown>\n#4 0x5604afbc11c7 <unknown>\n#5 0x5604afba89a3 <unknown>\n#6 0x5604afb7d46a <unknown>\n#7 0x5604afb7e55e <unknown>\n#8 0x5604afdd7cae <unknown>\n#9 0x5604afddb8fe <unknown>\n#10 0x5604afde4f20 <unknown>\n#11 0x5604afddc923 <unknown>\n#12 0x5604afdafc0e <unknown>\n#13 0x5604afdffb08 <unknown>\n#14 0x5604afdffc97 <unknown>\n#15 0x5604afe10113 <unknown>\n#16 0x7f4629094b43 <unknown>\n\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 146, in get_all_videos_status\n    if not self.check_is_video_playing(video_index,video_element):\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 134, in check_is_video_playing\n    video_status = self.get_details_from_youtube_embed_video(element,video_iframe)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 100, in get_details_from_youtube_embed_video\n    self.do_click_to_element_by_offset(element,50,50)\n  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 36, in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py\", line 78, in perform\n    self.w3c_actions.perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py\", line 91, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Checking Video 1 Is Play Or Not","time":{"start":1689162627788,"stop":1689162629833,"duration":2045},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x5604afe18133 <unknown>\n#1 0x5604afb4c7f0 <unknown>\n#2 0x5604afbca30b <unknown>\n#3 0x5604afba8bd2 <unknown>\n#4 0x5604afbc11c7 <unknown>\n#5 0x5604afba89a3 <unknown>\n#6 0x5604afb7d46a <unknown>\n#7 0x5604afb7e55e <unknown>\n#8 0x5604afdd7cae <unknown>\n#9 0x5604afddb8fe <unknown>\n#10 0x5604afde4f20 <unknown>\n#11 0x5604afddc923 <unknown>\n#12 0x5604afdafc0e <unknown>\n#13 0x5604afdffb08 <unknown>\n#14 0x5604afdffc97 <unknown>\n#15 0x5604afe10113 <unknown>\n#16 0x7f4629094b43 <unknown>\n\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 134, in check_is_video_playing\n    video_status = self.get_details_from_youtube_embed_video(element,video_iframe)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 100, in get_details_from_youtube_embed_video\n    self.do_click_to_element_by_offset(element,50,50)\n  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 36, in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py\", line 78, in perform\n    self.w3c_actions.perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py\", line 91, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Clicked On Play Button","time":{"start":1689162627788,"stop":1689162629832,"duration":2044},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x5604afe18133 <unknown>\n#1 0x5604afb4c7f0 <unknown>\n#2 0x5604afbca30b <unknown>\n#3 0x5604afba8bd2 <unknown>\n#4 0x5604afbc11c7 <unknown>\n#5 0x5604afba89a3 <unknown>\n#6 0x5604afb7d46a <unknown>\n#7 0x5604afb7e55e <unknown>\n#8 0x5604afdd7cae <unknown>\n#9 0x5604afddb8fe <unknown>\n#10 0x5604afde4f20 <unknown>\n#11 0x5604afddc923 <unknown>\n#12 0x5604afdafc0e <unknown>\n#13 0x5604afdffb08 <unknown>\n#14 0x5604afdffc97 <unknown>\n#15 0x5604afe10113 <unknown>\n#16 0x7f4629094b43 <unknown>\n\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/Store_Reviews/Reviews/Review.py\", line 100, in get_details_from_youtube_embed_video\n    self.do_click_to_element_by_offset(element,50,50)\n  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 36, in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py\", line 78, in perform\n    self.w3c_actions.perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py\", line 91, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Scroll To The Element","time":{"start":1689162627789,"stop":1689162627811,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"31e05231932c81416c4e9b958b95f6f1\", element=\"73E71E175BC6EF74FBDC161B0F13248F_element_16\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Scroll To The Element","time":{"start":1689162629812,"stop":1689162629830,"duration":18},"status":"broken","statusMessage":"selenium.common.exceptions.MoveTargetOutOfBoundsException: Message: move target out of bounds\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x5604afe18133 <unknown>\n#1 0x5604afb4c7f0 <unknown>\n#2 0x5604afbca30b <unknown>\n#3 0x5604afba8bd2 <unknown>\n#4 0x5604afbc11c7 <unknown>\n#5 0x5604afba89a3 <unknown>\n#6 0x5604afb7d46a <unknown>\n#7 0x5604afb7e55e <unknown>\n#8 0x5604afdd7cae <unknown>\n#9 0x5604afddb8fe <unknown>\n#10 0x5604afde4f20 <unknown>\n#11 0x5604afddc923 <unknown>\n#12 0x5604afdafc0e <unknown>\n#13 0x5604afdffb08 <unknown>\n#14 0x5604afdffc97 <unknown>\n#15 0x5604afe10113 <unknown>\n#16 0x7f4629094b43 <unknown>\n\n","statusTrace":"  File \"/home/kishorekumarmahto/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/BasePage.py\", line 36, in do_click_to_element_by_offset\n    action.move_to_element_with_offset(element,x,y).click().perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/action_chains.py\", line 78, in perform\n    self.w3c_actions.perform()\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/common/actions/action_builder.py\", line 91, in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"31e05231932c81416c4e9b958b95f6f1\", element=\"73E71E175BC6EF74FBDC161B0F13248F_element_16\")>"},{"name":"x","value":"50"},{"name":"y","value":"50"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"All Review Videos Playing Or Not Is Failed","time":{"start":1689162630212,"stop":1689162630212,"duration":0},"status":"failed","statusMessage":"AssertionError: assert False\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Tests/Store_Reviews/Reviews/test_review.py\", line 104, in test_all_review_videos_playing_or_not\n    assert False\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"4583f12666c893c7","name":"All Review Videos Playing Or Not Error","source":"4583f12666c893c7.png","type":"image/png","size":1113546}],"parameters":[],"stepsCount":8,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"init_driver::0","time":{"start":1689162630286,"stop":1689162630341,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver')"},{"name":"parentSuite","value":"Store_Reviews.Reviews"},{"name":"suite","value":"test_review"},{"name":"subSuite","value":"TestReview"},{"name":"host","value":"isadmin"},{"name":"thread","value":"81167-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Store_Reviews.Reviews.test_review"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init_driver')"]},"source":"1588aea14308733.json","parameterValues":[]}