{"uid":"2b31a8bba6bf31fc","name":"Test Case 13 : Footer Element (Recent Posts, Subscribe, Update,Contact Details Visibility Testing)","fullName":"Tests.HomePage_ContactUs.Footer.test_Footer.TestFooter#test_footer_element","historyId":"3e23f3fe33f52e70b63e740de09d54b9","time":{"start":1689740602883,"stop":1689740902908,"duration":300025},"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate the footer page is having the recent posts , Subscribe,updates ,contact details \n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>Recent posts option should be with updated post.\n    \n    ","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 297.956\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x55b8d84d2133 <unknown>\n#1 0x55b8d8206966 <unknown>\n#2 0x55b8d81f0404 <unknown>\n#3 0x55b8d81f0120 <unknown>\n#4 0x55b8d81eeb18 <unknown>\n#5 0x55b8d81ef2c2 <unknown>\n#6 0x55b8d81fce8f <unknown>\n#7 0x55b8d81fdf32 <unknown>\n#8 0x55b8d82107fb <unknown>\n#9 0x55b8d821503b <unknown>\n#10 0x55b8d81ef863 <unknown>\n#11 0x55b8d82105bb <unknown>\n#12 0x55b8d827b3fd <unknown>\n#13 0x55b8d82629a3 <unknown>\n#14 0x55b8d823746a <unknown>\n#15 0x55b8d823855e <unknown>\n#16 0x55b8d8491cae <unknown>\n#17 0x55b8d84958fe <unknown>\n#18 0x55b8d849ef20 <unknown>\n#19 0x55b8d8496923 <unknown>\n#20 0x55b8d8469c0e <unknown>\n#21 0x55b8d84b9b08 <unknown>\n#22 0x55b8d84b9c97 <unknown>\n#23 0x55b8d84ca113 <unknown>\n#24 0x7f9625294b43 <unknown>","statusTrace":"self = <test_Footer.TestFooter object at 0x7f4f85e22bc0>\n\n    @allure.title(\"Test Case 13 : Footer Element (Recent Posts, Subscribe, Update,Contact Details Visibility Testing)\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate the footer page is having the recent posts , Subscribe,updates ,contact details\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>Recent posts option should be with updated post.\n    \n    \"\"\")\n    def test_footer_element(self):\n>       TestFooter.FooterObj = Footer(self.driver,self.wait)\n\nTests/HomePage_ContactUs/Footer/test_Footer.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/HomePage_ContactUs/Footer/Footer.py:12: in __init__\n    self.driver.get(TestData.BaseUrl)\n/usr/local/lib/python3.10/dist-packages/undetected_chromedriver/__init__.py:543: in get\n    return super().get(url)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:455: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4f85c4d540>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#22 0x55b8d84b9c97 \\\\u003Cunknown>\\\\n#23 0x55b8d84ca113 \\\\u003Cunknown>\\\\n#24 0x7f9625294b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 297.956\nE         (Session info: chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x55b8d84d2133 <unknown>\nE       #1 0x55b8d8206966 <unknown>\nE       #2 0x55b8d81f0404 <unknown>\nE       #3 0x55b8d81f0120 <unknown>\nE       #4 0x55b8d81eeb18 <unknown>\nE       #5 0x55b8d81ef2c2 <unknown>\nE       #6 0x55b8d81fce8f <unknown>\nE       #7 0x55b8d81fdf32 <unknown>\nE       #8 0x55b8d82107fb <unknown>\nE       #9 0x55b8d821503b <unknown>\nE       #10 0x55b8d81ef863 <unknown>\nE       #11 0x55b8d82105bb <unknown>\nE       #12 0x55b8d827b3fd <unknown>\nE       #13 0x55b8d82629a3 <unknown>\nE       #14 0x55b8d823746a <unknown>\nE       #15 0x55b8d823855e <unknown>\nE       #16 0x55b8d8491cae <unknown>\nE       #17 0x55b8d84958fe <unknown>\nE       #18 0x55b8d849ef20 <unknown>\nE       #19 0x55b8d8496923 <unknown>\nE       #20 0x55b8d8469c0e <unknown>\nE       #21 0x55b8d84b9b08 <unknown>\nE       #22 0x55b8d84b9c97 <unknown>\nE       #23 0x55b8d84ca113 <unknown>\nE       #24 0x7f9625294b43 <unknown>\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py:249: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1689740601210,"stop":1689740602883,"duration":1673},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"descriptionHtml":"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate the footer page is having the recent posts , Subscribe,updates ,contact details \n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>Recent posts option should be with updated post.\n    \n    ","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 297.956\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x55b8d84d2133 <unknown>\n#1 0x55b8d8206966 <unknown>\n#2 0x55b8d81f0404 <unknown>\n#3 0x55b8d81f0120 <unknown>\n#4 0x55b8d81eeb18 <unknown>\n#5 0x55b8d81ef2c2 <unknown>\n#6 0x55b8d81fce8f <unknown>\n#7 0x55b8d81fdf32 <unknown>\n#8 0x55b8d82107fb <unknown>\n#9 0x55b8d821503b <unknown>\n#10 0x55b8d81ef863 <unknown>\n#11 0x55b8d82105bb <unknown>\n#12 0x55b8d827b3fd <unknown>\n#13 0x55b8d82629a3 <unknown>\n#14 0x55b8d823746a <unknown>\n#15 0x55b8d823855e <unknown>\n#16 0x55b8d8491cae <unknown>\n#17 0x55b8d84958fe <unknown>\n#18 0x55b8d849ef20 <unknown>\n#19 0x55b8d8496923 <unknown>\n#20 0x55b8d8469c0e <unknown>\n#21 0x55b8d84b9b08 <unknown>\n#22 0x55b8d84b9c97 <unknown>\n#23 0x55b8d84ca113 <unknown>\n#24 0x7f9625294b43 <unknown>","statusTrace":"self = <test_Footer.TestFooter object at 0x7f4f85e22bc0>\n\n    @allure.title(\"Test Case 13 : Footer Element (Recent Posts, Subscribe, Update,Contact Details Visibility Testing)\")\n    @allure.description_html(\"\"\"\n    <br><b>Test Case Description:</b>\n    <br><br>Validate the footer page is having the recent posts , Subscribe,updates ,contact details\n    \n    <br><br><b>Expeceted Results:</b>\n    <br><br>Recent posts option should be with updated post.\n    \n    \"\"\")\n    def test_footer_element(self):\n>       TestFooter.FooterObj = Footer(self.driver,self.wait)\n\nTests/HomePage_ContactUs/Footer/test_Footer.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages/HomePage_ContactUs/Footer/Footer.py:12: in __init__\n    self.driver.get(TestData.BaseUrl)\n/usr/local/lib/python3.10/dist-packages/undetected_chromedriver/__init__.py:543: in get\n    return super().get(url)\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:455: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4f85c4d540>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#22 0x55b8d84b9c97 \\\\u003Cunknown>\\\\n#23 0x55b8d84ca113 \\\\u003Cunknown>\\\\n#24 0x7f9625294b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 297.956\nE         (Session info: chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x55b8d84d2133 <unknown>\nE       #1 0x55b8d8206966 <unknown>\nE       #2 0x55b8d81f0404 <unknown>\nE       #3 0x55b8d81f0120 <unknown>\nE       #4 0x55b8d81eeb18 <unknown>\nE       #5 0x55b8d81ef2c2 <unknown>\nE       #6 0x55b8d81fce8f <unknown>\nE       #7 0x55b8d81fdf32 <unknown>\nE       #8 0x55b8d82107fb <unknown>\nE       #9 0x55b8d821503b <unknown>\nE       #10 0x55b8d81ef863 <unknown>\nE       #11 0x55b8d82105bb <unknown>\nE       #12 0x55b8d827b3fd <unknown>\nE       #13 0x55b8d82629a3 <unknown>\nE       #14 0x55b8d823746a <unknown>\nE       #15 0x55b8d823855e <unknown>\nE       #16 0x55b8d8491cae <unknown>\nE       #17 0x55b8d84958fe <unknown>\nE       #18 0x55b8d849ef20 <unknown>\nE       #19 0x55b8d8496923 <unknown>\nE       #20 0x55b8d8469c0e <unknown>\nE       #21 0x55b8d84b9b08 <unknown>\nE       #22 0x55b8d84b9c97 <unknown>\nE       #23 0x55b8d84ca113 <unknown>\nE       #24 0x7f9625294b43 <unknown>\n\n/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py:249: TimeoutException","steps":[{"name":"Initialiazing the webdriver","time":{"start":1689740602883,"stop":1689740602884,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"driver","value":"<undetected_chromedriver.Chrome (session=\"a759978d56e1a6b674ea904d3710c097\")>"},{"name":"wait","value":"<selenium.webdriver.support.wait.WebDriverWait (session=\"a759978d56e1a6b674ea904d3710c097\")>"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Opening Base Url","time":{"start":1689740602884,"stop":1689740902906,"duration":300022},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 297.956\n  (Session info: chrome=114.0.5735.133)\nStacktrace:\n#0 0x55b8d84d2133 <unknown>\n#1 0x55b8d8206966 <unknown>\n#2 0x55b8d81f0404 <unknown>\n#3 0x55b8d81f0120 <unknown>\n#4 0x55b8d81eeb18 <unknown>\n#5 0x55b8d81ef2c2 <unknown>\n#6 0x55b8d81fce8f <unknown>\n#7 0x55b8d81fdf32 <unknown>\n#8 0x55b8d82107fb <unknown>\n#9 0x55b8d821503b <unknown>\n#10 0x55b8d81ef863 <unknown>\n#11 0x55b8d82105bb <unknown>\n#12 0x55b8d827b3fd <unknown>\n#13 0x55b8d82629a3 <unknown>\n#14 0x55b8d823746a <unknown>\n#15 0x55b8d823855e <unknown>\n#16 0x55b8d8491cae <unknown>\n#17 0x55b8d84958fe <unknown>\n#18 0x55b8d849ef20 <unknown>\n#19 0x55b8d8496923 <unknown>\n#20 0x55b8d8469c0e <unknown>\n#21 0x55b8d84b9b08 <unknown>\n#22 0x55b8d84b9c97 <unknown>\n#23 0x55b8d84ca113 <unknown>\n#24 0x7f9625294b43 <unknown>\n\n","statusTrace":"  File \"/home/kishorekumarmahto/my_backup/Testing/Dr._Garcia_Biomagnetism_website/Pages/HomePage_ContactUs/Footer/Footer.py\", line 12, in __init__\n    self.driver.get(TestData.BaseUrl)\n  File \"/usr/local/lib/python3.10/dist-packages/undetected_chromedriver/__init__.py\", line 543, in get\n    return super().get(url)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 455, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"init_driver::0","time":{"start":1689740902986,"stop":1689740903039,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver')"},{"name":"parentSuite","value":"Tests.HomePage_ContactUs.Footer"},{"name":"suite","value":"test_Footer"},{"name":"subSuite","value":"TestFooter"},{"name":"host","value":"isadmin"},{"name":"thread","value":"8101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.HomePage_ContactUs.Footer.test_Footer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('init_driver')"]},"source":"2b31a8bba6bf31fc.json","parameterValues":[]}